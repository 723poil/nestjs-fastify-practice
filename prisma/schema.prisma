generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgres"
  url      = env("DB_URL")
}

generator markdown {
  provider = "prisma-markdown"
  output = "./ERD.md"
  title = "Nestjs Fastify Practice"
}

//-----------------------------------------------------------
// ACTORS
//-----------------------------------------------------------
/// Customer information, but not a person but a **connection** basis.
///
/// `drive_customers` is an entity that literally embodies the information
/// of those who participated in the drive system as customers. By the way,
/// the `drive_customers` does not mean a person, but a **connection** basis.
/// Therefore, even if the same person connects to the drive system multiple,
/// multiple records are created in `drive_customers`.
///
/// The first purpose of this is to track the customer's inflow path in detail,
/// and it is for cases where the same person enters as a non-member, reads a
/// {@link drive_repository_files repository file} in advance, and registers/logs
/// in at the moment for modification. It is the second. Lastly, it is to
/// accurately track the activities that a person performs at the drive system
/// in various ways like below.
///
/// - Same person comes from an {@link drive_external_users external service}
/// - Same person creates multiple {@link drive_members accounts}
/// - Same person makes a download with only {@link drive_citizens real name authentication}
///
/// Therefore, `drive_customers` can have multiple records with the same
/// {@link drive_citizens}, {@link drive_members}, and {@link drive_external_users}.
/// Additionally, if a customer signs up for membership after verifying their real
/// name or signs up for our service after being a user of an external service,
/// all related records are changed at once. Therefore, identification and tracking
/// of customers can be done very systematically.
///
/// @namespace Actors
/// @author Samchon
model User {

   //----
  // COLUMNS
  //----
  /// Primary Key.
  ///
  /// @format uuid
  id Int @default(autoincrement()) @id
  email String @unique
  name String?
}